-- \set SchemaName %SCHEMA_NAME%
-- --Create schema
-- CREATE SCHEMA IF NOT EXISTS :SchemaName;
-- -- SELECT SCHEMA
-- SET search_path TO :SchemaName;

CREATE TABLE IF NOT EXISTS WaferType (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar(50) UNIQUE,
  engineeringRun "engineeringRun",
  foundry "foundryName",
  technology "waferTech",
  waferMap JSON
);

CREATE TABLE IF NOT EXISTS WaferTypeImage (
  waferTypeId integer NOT NULL,
  imageBase64String text NOT NULL,
  FOREIGN KEY (waferTypeId) REFERENCES WaferType (id)
);

CREATE TABLE IF NOT EXISTS Wafer (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  serialNumber varchar(50) UNIQUE,
  batchNumber integer,
  waferTypeId integer NOT NULL,
  generalLocation "wpGeneralLocation",
  thinningDate date,
  dicingDate date,
  productionDate date,
  FOREIGN KEY (waferTypeId) REFERENCES WaferType (id)
);

CREATE TABLE IF NOT EXISTS WaferLocation (
  waferId integer NOT NULL,
  generalLocation "wpGeneralLocation",
  creationTime timestamp DEFAULT (CURRENT_TIMESTAMP),
  username varchar(50),
  description text,
  FOREIGN KEY (waferId) REFERENCES Wafer (id)
);

-- CREATE TABLE IF NOT EXISTS "Version" (
--   "id" integer PRIMARY KEY,
--   "name" varchar(50),
--   "baseVersion" integer,
--   "creationTime" timestamp DEFAULT (CURRENT_TIMESTAMP),
--   "description" varchar(50)
-- );

CREATE TABLE IF NOT EXISTS Asic (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  waferId integer,
  serialNumber varchar(50) UNIQUE,
  familyType "asicFamilyType",
  waferMapPosition varchar(50),
  quality "asicQuality",
  FOREIGN KEY (waferId) REFERENCES Wafer (id)
);

CREATE TABLE IF NOT EXISTS WaferProbeMachine (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  serialNumber varchar(50) UNIQUE,
  name varchar(50) UNIQUE,
  hostName varchar(50),
  connectionType "wpConnectionType",
  connectionPort integer,
  generalLocation "wpGeneralLocation",
  software "wpSwType",
  swVersion varchar(50),
  vendor "wpVendor"
);

CREATE TABLE IF NOT EXISTS ProbeCard (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  serialNumber varchar(50) UNIQUE,
  vendor "pcVendor",
  name "pcName",
  model "pcModel",
  version integer,
  arrivalDate date,
  location "pcLocation",
  type "pcType",
  vendorCleaningInterval integer
);

CREATE TABLE IF NOT EXISTS ProbeCardFamilyType (
  probeCardId integer,
  asicFamilyType "asicFamilyType",
  FOREIGN KEY (probeCardId) REFERENCES ProbeCard (id)
);

CREATE TABLE IF NOT EXISTS WaferProbeProject (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  wpMachineId integer,
  waferTypeId integer,
  asicFamilyType "asicFamilyType",
  orientation "waferMapOrientation",
  name varchar(50) UNIQUE,
  alignmentDie varchar(50),
  homeDie varchar(50),
  local2GlobalMap JSON,
  FOREIGN KEY (wpMachineId) REFERENCES WaferProbeMachine (id),
  FOREIGN KEY (waferTypeId) REFERENCES WaferType (id)
);

-- CREATE TABLE IF NOT EXISTS "ProbeCardMaintenance" (
--   "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   "probeCardId" integer,
--   "cleaningDate" date,
--   "totNumContacts" integer,
--   "numContactsSinceLastCleaning" integer,
--   "numContactsDuringCleaning" integer,
--   "cleaningOverdrive" integer
-- );
--
-- CREATE TABLE IF NOT EXISTS "AsicProbing" (
--   "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   "asicId" integer,
--   "numContacts" integer,
--   "mechanicalQuality" contactMechanicalQuality,
--   "arrivalDate" date
-- );

CREATE TABLE IF NOT EXISTS WaferLoadedInMachine (
  machineId integer,
  waferId integer,
  date date,
  userName varchar(50),
  status "waferInMachineStatus",
  FOREIGN KEY (machineId) REFERENCES WaferProbeMachine (id),
  FOREIGN KEY (waferId) REFERENCES Wafer (id)
);

CREATE TABLE IF NOT EXISTS ProbeCardInstalledInMachine (
  machineId integer,
  probeCardId integer,
  date date,
  userName varchar(50),
  FOREIGN KEY (machineId) REFERENCES WaferProbeMachine (id),
  FOREIGN KEY (probeCardId) REFERENCES ProbeCard (id)
);

-- CREATE TABLE IF NOT EXISTS "AsicConfiguration" (
--   "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   "probeStationId" integer,
--   "versionId" integer,
--   "isTestingAllowed" boolean
-- );
--
-- CREATE TABLE IF NOT EXISTS "WpConfiguration" (
--   "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   "wpMachineId" integer,
--   "versionId" integer,
--   "orientation" waferMapOrientation
-- );
--
-- CREATE TABLE IF NOT EXISTS "ProbeCardConfiguration" (
--   "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   "probeCardId" integer,
--   "versionId" integer,
--   "cleaningInterval" integer
-- );

CREATE TABLE Chip (
  id integer PRIMARY KEY,
  serialNumber varchar(50) UNIQUE,
  asicId integer,
  generalLocation "wpGeneralLocation",
  FOREIGN KEY (asicId) REFERENCES Asic (id)
);

CREATE TABLE ChipLocation (
  chipId integer NOT NULL,
  generalLocation "wpGeneralLocation",
  creationTime timestamp DEFAULT (CURRENT_TIMESTAMP),
  username varchar(50),
  description text,
  FOREIGN KEY (chipId) REFERENCES Chip (id)
);

CREATE TABLE SLDO (
  id integer PRIMARY KEY,
  chipId integer,
  serialNumber varchar(50),
  FOREIGN KEY (chipId) REFERENCES Chip (id)
);

CREATE TABLE TestSetup (
  id integer PRIMARY KEY,
  name varchar(50) UNIQUE,
  location "wpGeneralLocation"
);

CREATE TABLE TestSetupEquipment (
  testSetupId integer,
  equipment "testEquipments",
  eqipmentDetails JSON,
  FOREIGN KEY (testSetupId) REFERENCES TestSetup (id)
);

CREATE TABLE SLDOTestConfiguration (
  id integer PRIMARY KEY,
  name varchar(50),
  mode "SLDOTestModes",
  loadCapacitance "SLDOTestLoadCap",
  loadCurrent "SLDOTestLoadCurrent",
  temperature "SLDOTestTemparature"
);

CREATE TABLE SLDOTest (
  id integer PRIMARY KEY,
  name "SLDOTestTypes",
  SLDOid integer,
  testSetupId integer,
  configId integer,
  testValues JSON,
  FOREIGN KEY (SLDOid) REFERENCES SLDO (id),
  FOREIGN KEY (testSetupId) REFERENCES TestSetup (id),
  FOREIGN KEY (configId) REFERENCES SLDOTestConfiguration (id)
);

