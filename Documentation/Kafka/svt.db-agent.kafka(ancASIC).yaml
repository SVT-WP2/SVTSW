openapi: '3.0.1'
info:
  title: SVT DB Agent(AncASIC_SLDO part)
  description: |
    The Kafka communication layer definitions for `SVT DB Agent Service for SLDO Tests`. 
    
    ### Naming Conventions
    - The path format of routes has the next format `/<KAFKA_TOPIC_NAME>/<MESSAGE_TYPE_NAME>`.
    - The reply message topic name is define by the global SVT naming conventions `*.reply`, e.g: 
      - request message topic `svt.db-agent.request` => reply topic name `svt.db-agent.request.reply`
    - Each message structure follows the global SVT naming conventions 
    
    ### POST Request Meaning
    - Request body describes Kafka Message structure
    - Response
      - if response is specified, the relevant message will be emmited to the relevant *.reply topic as a reply to that message.
    
    ### Useful Links
    - Online Swagger Editor: [https://editor-next.swagger.io](https://editor-next.swagger.io)
    - SVT Kafka Naming Conventions: [README](https://github.com/SVT-WP2/SVTSW/blob/master/Documentation/Kafka/SvtKafkaConventions.md)
    
    ###Logic
    - No update message for the Test configuration because any changes to the test configuration means a different configuration.
    

  version: 0.0.2
paths:
  /svt.db-agent.request/GetAllTestSetups:
    post:
      tags:
        - Test Setup
      summary: Get All Test Setups
      description: Returns list of Test setups in the reply message. Optional filter by Test Setup Ids can be applied to return exact set of Test Setups.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/GetAllTestSetupsMessage'

        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/GetAllTestSetupsReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"
                
  /svt.db-agent.request/CreateTestSetup:
    post:
      tags:
        - Test Setup
      summary: Create a Test Setup
      description: Returns the newly created TestSetup in the reply message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/CreateTestSetupMessage'

        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/CreateTestSetupReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"
                
  /svt.db-agent.request/UpdateTestSetup:
    post:
      tags:
        - Test Setup
      summary: Update Test Setup
      description: Returns updated TestSetup in the reply message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/UpdateTestSetupMessage'
    
        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/UpdateTestSetupReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"
  
  /svt.db-agent.request/GetAllTestSetupEquipment:
    post:
      tags:
        - Test Setup Equipment
      summary: Get All Test Setup Equipment
      description: Returns list of Test Setup Equipment in the reply message. Optional filter by Test Setup Equipment Ids can be applied to return exact set of Test Setup Equipment.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/GetAllTestSetupEquipmentMessage'

        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/GetAllTestSetupEquipmentReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"
  
  /svt.db-agent.request/CreateTestSetupEquipment:
    post:
      tags:
        - Test Setup Equipment
      summary: Create a Test Setup Equipment
      description: Returns the newly created TestSetupEquipment in the reply message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/CreateTestSetupEquipmentMessage'

        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/CreateTestSetupEquipmentReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"
                
  /svt.db-agent.request/UpdateTestSetupEquipment:
    post:
      tags:
        - Test Setup Equipment
      summary: Update Test Setup Equipment
      description: Returns updated Test Setup Equipment in the reply message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/UpdateTestSetupEquipmentMessage'
    
        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/UpdateTestSetupEquipmentReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"              
  /svt.db-agent.request/GetAllSLDOTestConfigurations:
    post:
      tags:
        - SLDO Test Configurations
      summary: Get All SLDO Test Configurations
      description: Returns list of SLDO Test Configurations in the reply message. Optional filter by Test Configuration Ids can be applied to return exact set of Test Setups.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/GetAllSLDOTestConfigurationsMessage'

        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/GetAllSLDOTestConfigurationsReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"
                
  /svt.db-agent.request/CreateTestConfiguration:
    post:
      tags:
        - SLDO Test Configurations
      summary: Create a Test Configuration
      description: Returns the newly created SLDO Test Configurations in the reply message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/CreateTestConfigurationMessage'

        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/CreateTestConfigurationReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"
                
  /svt.db-agent.request/GetAllSLDOTests:
    post:
      tags:
        - SLDO Tests
      summary: Get All SLDO Tests
      description: Returns list of SLDO Tests in the reply message. Optional filter by Ancillary ASIC Test Ids can be applied to return exact set of Test Setups.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/GetAllSLDOTestMessage'

        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/GetAllSLDOTestReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"

  /svt.db-agent.request/CreateSLDOTest:
    post:
      tags:
        - SLDO Tests
      summary: Create an Ancillary ASIC Test
      description: Returns the newly created Ancillary ASIC Test in the reply message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/RequestMessage'
                - $ref: '#/components/schemas/CreateSLDOTestMessage'

        required: true
      responses:
        '200':
          description: Reply Message
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/ReplyMessage'
                  - $ref: '#/components/schemas/CreateSLDOTestReplyMessage'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplyMessage"
                
  
              
components:
  schemas:
    RequestMessage:
      type: object
      required:
        - type
      properties:
        type:
          type: string
        data:
          type: object
    ReplyMessage:
      type: object
      required:
        - status
        - type
      properties:
        status:
          $ref: "#/components/schemas/ReplyStatus"
        type:
          type: string
        data:
          type: object
        error:
          type: object
          required:
            - message
          properties:
            code:
              type: number
            message:
              type: string
    ReplyStatus:
      type: string
      enum:
        - Success
        - BadRequest
        - NotFound
        - UnexpectedError
    #
    # Test Setup :: LIST
    #
    GetAllTestSetupsMessage:
      properties:
        type:
          type: string
          default: 'GetAllTestSetups'
        data:
          type: object
          properties:
            filter:
              type: object
              properties:
                ids:
                  type: array
                  description: Test setups ids array. If array is empty / undefined => all Test Setups will be returned.
                  items:
                    type: number
    GetAllTestSetupsReplyMessage:
      properties:
        type:
          type: string
          default: 'GetAllTestSetupsReply'
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/TestSetupDto'
    #
    # TESTSETUP :: CREATE
    #
    CreateTestSetupMessage:
      properties:
        type:
          type: string
          default: 'CreateTestSetup'
        data:
          type: object
          properties:
            create:
              $ref: "#/components/schemas/TestSetupCreateDto"
    CreateTestSetupReplyMessage:
      properties:
        type:
          type: string
          default: 'CreateTestSetupReply'
        data:
          type: object
          properties:
            entity:
              $ref: '#/components/schemas/TestSetupDto'
    #
    # TESTSETUP :: UPDATE
    #
    UpdateTestSetupMessage:
      properties:
        type:
          type: string
          default: 'UpdateTestSetup'
        data:
          type: object
          required:
            - id
            - update
          properties:
            id:
              type: number
              description: TestSetup Id
            update:
              $ref: "#/components/schemas/TestSetupUpdateDto"
    UpdateTestSetupReplyMessage:
      properties:
        type:
          type: string
          default: 'UpdateTestSetupReply'
        data:
          type: object
          properties:
            entity:
              $ref: '#/components/schemas/TestSetupDto'
    
    #
    # TESTSETUPEQIPMENT :: LIST
    #         
    
    GetAllTestSetupEquipmentMessage:
      properties:
        type:
          type: string
          default: 'GetAllTestSetupEquipment'
        data:
          type: object
          properties:
            filter:
              type: object
              properties:
                ids:
                  type: array
                  description: Test setups ids array. If array is empty / undefined => all Test Setup equipment will be returned.
                  items:
                    type: number
    GetAllTestSetupEquipmentReplyMessage:
      properties:
        type:
          type: string
          default: 'GetAllTestSetupEquipmentReply'
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/TestSetupEquipmentDto'
    
    
    #
    # TESTSETUPEQIPMENT :: CREATE
    #     
    
    CreateTestSetupEquipmentMessage:
      properties:
        type:
          type: string
          default: 'CreateTestSetupEquipment'
        data:
          type: object
          properties:
            create:
              $ref: "#/components/schemas/TestSetupEquipmentCreateDto"
    CreateTestSetupEquipmentReplyMessage:
      properties:
        type:
          type: string
          default: 'CreateTestSetupEquipmentReply'
        data:
          type: object
          properties:
            entity:
              $ref: '#/components/schemas/TestSetupEquipmentDto'
    
    
    #
    # TESTSETUPEQIPMENT :: UPDATE
    #     
    
    UpdateTestSetupEquipmentMessage:
      properties:
        type:
          type: string
          default: 'UpdateTestSetupEquipment'
        data:
          type: object
          properties:
            create:
              $ref: "#/components/schemas/TestSetupEquipmentUpdateDto"
            
    UpdateTestSetupEquipmentReplyMessage:
      properties:
        type:
          type: string
          default: 'UpdateTestSetupEquipmentReply'
        data:
          type: object
          properties:
            entity:
              $ref: '#/components/schemas/TestSetupEquipmentDto'
    
    #
    # TESTCONFIGURATION :: LIST
    #
    GetAllSLDOTestConfigurationsMessage:
      properties:
        type:
          type: string
          default: 'GetAllSLDOTestConfigurations'
        data:
          type: object
          properties:
            filter:
              type: object
              properties:
                ids:
                  type: array
                  description: SLDO Test Configurations ids array. If array is empty / undefined => all SLDO Test Configurations will be returned.
                  items:
                    type: number
    GetAllSLDOTestConfigurationsReplyMessage:
      properties:
        type:
          type: string
          default: 'GetAllSLDOTestConfigurationsReply'
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/TestConfigurationDto'
    #
    # TESTCONFIGURATION :: CREATE
    #
    CreateTestConfigurationMessage:
      properties:
        type:
          type: string
          default: 'CreateTestConfiguration'
        data:
          type: object
          properties:
            create:
              $ref: "#/components/schemas/TestConfigurationCreateDto"
    CreateTestConfigurationReplyMessage:
      properties:
        type:
          type: string
          default: 'CreateTestConfigurationReply'
        data:
          type: object
          properties:
            entity:
              $ref: '#/components/schemas/TestConfigurationDto'
              
        #
    #   
    # SLDOTest :: LIST
    #
    GetAllSLDOTestMessage:
      properties:
        type:
          type: string
          default: 'GetAllSLDOTests'
        data:
          type: object
          properties:
            filter:
              type: object
              properties:
                ids:
                  type: array
                  description: Anc Asic Test ids array. If array is empty / undefined => all Anc Asic Tests will be returned.
                  items:
                    type: number
    GetAllSLDOTestReplyMessage:
      properties:
        type:
          type: string
          default: 'GetAllSLDOTestsReply'
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/SLDOTestDto'
    #
    # SLDOTest :: CREATE
    #
    CreateSLDOTestMessage:
      properties:
        type:
          type: string
          default: 'CreateSLDOTest'
        data:
          type: object
          properties:
            create:
              $ref: "#/components/schemas/SLDOTestCreateDto"
    CreateSLDOTestReplyMessage:
      properties:
        type:
          type: string
          default: 'CreateSLDOTestReply'
        data:
          type: object
          properties:
            entity:
              $ref: '#/components/schemas/SLDOTestDto'
    #
    # DTOs
    #
    TestSetupDto:
      type: object
      required:
        - id
        - name
        - location
        - equipment
        - equipmentDetails
      properties:
        id:
          type: number
        name:
          type: string
        location:
          $ref: "#/components/schemas/LocationsEnum"
        equipment:
          $ref: "#/components/schemas/EquipmentEnum"
        equipmentDetails:
          $ref: "#/components/schemas/EquipmentDetailsPH"
    TestSetupCreateDto:
      type: object
      required:
        - name
        - location
      properties:
        location:
          $ref: "#/components/schemas/LocationsEnum"
        equipment:
          $ref: "#/components/schemas/EquipmentEnum"
        equipmentDetails:
          $ref: "#/components/schemas/EquipmentDetailsPH"
      example:
        location: "A value from Enum wpGeneralLocation"
        equipment: "A value from Enum equipmentName" 
        equipmentDetails: 'Stringified json format'
      
        
    TestSetupUpdateDto:
      type: object
      properties:
        equipment:
          $ref: "#/components/schemas/EquipmentEnum"
        equipmentDetails:
          $ref: "#/components/schemas/EquipmentDetailsPH"
      example:
        equipment: "A value from equipmentEnum" 
        equipmentDetails: 'Stringified json format'
        
    TestSetupEquipmentDto:
      type: object
      required:
        - id
        - equipment
        - equipmentDetails
      properties:
        id:
          type: number
        equipment:
          $ref: "#/components/schemas/EquipmentEnum"
        equipmentDetails:
          $ref: "#/components/schemas/EquipmentDetailsPH"
    
    TestSetupEquipmentCreateDto:
      type: object
      required:
        - equipment
        - equipmentDetails
      properties:
        equipment:
          $ref: "#/components/schemas/EquipmentEnum"
        equipmentDetails:
          $ref: "#/components/schemas/EquipmentDetailsPH"
      example:
        equipment: "A value from Enum equipmentName" 
        equipmentDetails: 'Stringified json format'
    
    
    TestSetupEquipmentUpdateDto:
      type: object
      required:
        - equipment
        - equipmentDetails
      properties:
        equipment:
          $ref: "#/components/schemas/EquipmentEnum"
        equipmentDetails:
          $ref: "#/components/schemas/EquipmentDetailsPH"
      example:
        equipment: "A value from Enum equipmentName" 
        equipmentDetails: 'Stringified json format'
    
    TestConfigurationDto:
      type: object
      required:
        - id
        - name
        - mode
        - loadCapacitance
        - loadCurrent
        - temperature
      properties:
        id:
          type: number
        name:
          $ref: "#/components/schemas/NamesEnum"
        mode:
          $ref: "#/components/schemas/ModesEnum"
        loadCapacitance:
          $ref: "#/components/schemas/LoadCapacitanceEnum"
        loadCurrent:
          $ref: "#/components/schemas/LoadCurrentEnum"
        temperature:
          $ref: "#/components/schemas/TemperatureEnum"
    
    TestConfigurationCreateDto:
      type: object
      required:
        - name
        - mode
        - loadCapacitance
        - loadCurrent
        - temperature
      properties:
        name:
          $ref: "#/components/schemas/NamesEnum"
        mode:
          $ref: "#/components/schemas/ModesEnum"
        loadCapacitance:
          $ref: "#/components/schemas/LoadCapacitanceEnum"
        loadCurrent:
          $ref: "#/components/schemas/LoadCurrentEnum"
        temperature:
          $ref: "#/components/schemas/TemperatureEnum"
      example:
        name: "A value from Enum testTypes"
        mode: "A value from Enum modes"
        loadCapacitance: "A value from Enum loadCapacitance"
        loadCurrent: "A value from Enum loadCurrent"
        temperature: "A value from Enum temparature"
    SLDOTestDto:
      type: object
      required:
        - id
        - name
        - asicId
        - testSetupId
        - configId
        - testValues
      properties:
        id:
          type: number
        name:
          $ref: "#/components/schemas/NamesEnum"
        asicId:
          type: number
        testSetupId:
          type: number
        configId:
          type: number
        testValues:
          $ref: "#/components/schemas/TestValuesPH"
    SLDOTestCreateDto:
      type: object
      required:
          - name
          - asicId
          - testSetupId
          - configId
          - testValues
      properties:
        name:
          $ref: "#/components/schemas/NamesEnum"
        asicId:
          type: number
        testSetupId:
          type: number
        configId:
          type: number
        testValues:
          type: string
      example:
        testValues: 'Example testValues ({
        "inputs": {
          "vInTarget(V)": 1.55,
          "iInLimit(A)": 1.5,
          "rampRate(kV/s)": 3.1
        },
        "results": {
          "vOut(V)": 1.2
        })'
    SLDOTestCreateReplyDto:
      type: object
      required:
          - name
          - asicId
          - testSetupId
          - configId
          - testValues
      properties:
        name:
          $ref: "#/components/schemas/NamesEnum"
        asicId:
          type: number
        testSetupId:
          type: number
        configId:
          type: number
        testValues:
          $ref: "#/components/schemas/TestValueEnum"
    SLDOTestUpdateDto:
      type: object
      required:
          - testValues
      properties:
        testValues:
          $ref: "#/components/schemas/TestValuesPH"
    #
    # Enums
    #
    LocationsEnum:
      type: string
      enum:
        - Brunel
        - CERN_186_R_E10
        - Prague
        - LosAlamos
        - BNL
        - RAL
        - Darsburry
        - Birmingham
        - Liverpool
    EquipmentEnum:
      type: string
      enum:
        - Oscilloscope
        - Power Supply
        - Signal Generator
        - SMU
    NamesEnum:
      type: string
      enum:
        - Power Ramp Up
        - PSRR
        - Power Ramp Rate
        - DAC Scan
        - Overcurrent
        - Irradiation
    ModesEnum:
      type: string
      enum:
        - Mode0
        - Mode1
    LoadCapacitanceEnum:
      type: string
      enum:
        - 10nF
        - 100nF
        - 1uF
        - 10uF
    LoadCurrentEnum:
      type: string
      enum:
        - 40mA
        - 500mA
        - 900mA
    TemperatureEnum:
      type: string
      enum:
        - -20C
        - 27C
        - 60C
        - 105C
    TestValueEnum:
      type: string
      enum:
        - Stringified JSON null at creation.
    
    #
    # JsonPlaceHolders
    #
    EquipmentDetailsPH:
      type: object
      description: |
        Equipment-specific details. The structure varies based on the equipment type.
        - Oscilloscope: make, model, year, bandwidth, channels, sampling rate.
        - Power Supply: make, model, year, maxvoltage, maxcurrent.
        - Signal Generator: make, model, year, frequency range
        - SMU: make, model, year,compliance voltage, source current range.
      example:
        make: Teledyne LeCroy
        model: LeCroy1234
        year: 2025
        serialNumber: 0 
        bandwidth: "500MHz"
        channels: 2
        samplingRate: "1GS/s"
    TestValuesPH:
      type: object
      description: |
        Collection of test results across multiple electrical test measurements.
        The structure of test data may vary depending on the test type:
    
        - Power Ramp Up: Evaluates initial power supply behavior.
          Fields: vInTarget, iInLimit, vOut
    
        - PSRR (Power Supply Rejection Ratio): Evaluates response to power supply noise.
          Fields: vInTarget, iInLimit, signalAmplitude, signalFrequency, vOutAmplitude, psrr
    
        - Power Ramp Rate: Analyzes effects of ramp-up time on output voltage.
          Fields: vInTarget, iInLimit, tRamp, vOut
    
        - DAC Scan: Evaluates how DAC codes affect output voltage.
          Fields: vInTarget, iInLimit, dacCodes (31), vOutValues (31)
    
        - Over Current: Tests system behavior under over-current scenarios.
          Fields: vInTarget, iInLimit, iExcess, vOut, iOut, iIn
    
        - Irradiation: Measures effect of irradiation dose on electrical characteristics.
          Fields: vInTarget, iInLimit, irradiationDose, vOut, iOut, iIn
      properties:
        inputs:
          type: object
          properties:
            vInTarget:
              type: number
              description: Input voltage target (V)
            iInLimit:
              type: number
              description: Input current limit (A)
            rampRate:
              type: number
              description: Ramp rate (kV/s)
            signalAmplitude:
              type: number
              description: Signal amplitude (V)
            signalFrequency:
              type: number
              description: Signal frequency (Hz)
            tRamp:
              type: number
              description: Ramp time (ms)
            dacCodes:
              type: array
              items:
                type: integer
              description: List of 31 DAC input codes
            iExcess:
              type: number
              description: Excess current injected (A)
            irradiationDose:
              type: number
              description: Irradiation dose (unit TBD)
        results:
          type: object
          properties:
            vOut:
              type: number
              description: Output voltage (V)
            vOutAmplitude:
              type: number
              description: Output voltage amplitude (V)
            psrr:
              type: number
              description: Power Supply Rejection Ratio (dB)
            vOutValues:
              type: array
              items:
                type: number
              description: List of 31 output voltages from DAC scan
            iOut:
              type: number
              description: Output current (A)
            iIn:
              type: number
              description: Input current measured (A)
      example:
        inputs:
          vInTarget: 1.55
          iInLimit: 1.5
          rampRate: 3.1
        results:
          vOut: 1.2
  